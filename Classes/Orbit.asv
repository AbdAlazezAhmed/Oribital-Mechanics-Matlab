classdef Orbit
    %ORBIT Summary of this class goes here
    %   Detailed explanation goes here
    properties
        t
        mu = 398600;
        R_e = 6378;
        omega_earth = 2*pi*(1+1/356.26)/24/3600;
        J_2 = 0.00108263;
        dt = 96*60*60;
        res = 40000;
        R_plot
        V_plot
        alpha
        delta
        RA
        Dec
        n_curves
        method
        drag
        tlefile
                h
        e
        a
        Omega_0
        omega_0
        theta_0
        R1
        R2
        R3
        R_0
        V_0

        Omega
        omega
        Omega_dot
        omega_dot
        theta
        i
        r_p
        r_a
        R
        V
        R_X
        V_X
        R_d
        V_d
    end
    properties(Access = private)

    end
    properties(Access = protected)

        
    end
    
    methods
        function obj = Orbit(input,method,args)
            %ORBIT Construct an instance of this class
            %   Detailed explanation goes here
            arguments
                input ;
                method;
                args.R_0 = [];
                args.V_0 = [];
                args.r_a = [];
                args.r_p = [];
                args.theta_0 = [];
                args.omega_0 = [];
                args.Omega_0 = [];
                args.R1 = [];
                args.R2 = [];
                args.R3 = [];
                args.i = [];
                args.mu = 398600;
                args.R_e = 6378;
                args.omega_earth = 2*pi*(1+1/356.26)/24/3600;
                args.J_2 = 0.00108263;
                args.dt = 96*60*60;
                args.res = 5000;
                args.drag = false;
                args.tle = [];
            end
            obj.tlefile = args.tle;
            obj.method = method;
            obj.drag = args.drag;
            obj.dt = args.dt;
            switch input
             
                case 'RV'
                    switch method
                        case 'f(t)'
                            obj = orbitaElementsFromVectors(obj,args.R_0,args.V_0);
                        otherwise
                            print('Wrong orbit determination method')
                    end
                case 'OE'

                    obj.theta_0 = args.theta_0;
                    obj.Omega_0 = args.Omega_0;
                    obj.omega_0 = args.omega_0;
                    obj.i = args.i;
                    obj = orbitFromApoPeri(obj,args.r_a,args.r_p);
                    switch method
                        case 'f(t)'
                        case 'Cowell'
                            obj = initialVectorsFromOrbitalElements(obj);
                        otherwise
                            print('Wrong orbit determination method')
                    end
                    
                case 'TLE'
                    obj = orbitalElementsFromTLE(obj);
                    obj = initialVectorsFromOrbitalElements(obj);
                case 'GIBBS'
                    obj = gibbs(obj);
                otherwise
                    print('Wrong orbit input type')
            end
            
        end
        function obj = solveOrbit(obj)
            obj = newVectorsFromOrbitalElements(obj);
            obj = vectorToXandRevolvingCoord(obj);
            
            obj = vectorToLongLat(obj);
             %%the bottlenick is herrreeeeee
            obj = divideAlpha(obj);
        end
        function obj = orbitalElementsFromTLE(obj)
            file = fopen(obj.tlefile,'r');
            fgetl(file);
            l2 = fgetl(file);
            temp = sscanf(l2,"%*1d%*5d%8f%8f%7d%8f%8f%11f%*5d%*1d");
            obj.i = temp(1)*pi/180;
            obj.Omega_0 = temp(2)*pi/180;
            obj.e = temp(3)/10^7;
            obj.omega_0 = temp(4)*pi/180;
            M = temp(5)*pi/180;
            mm = temp(6);
            E_0 = newtonMethodVec(obj.e,M,1.0e-8)
            T = 24*60*60/mm
            obj.theta_0 = 2*atan(tan(E_0/2)/sqrt((1-obj.e)/(1+obj.e)));
            obj.a=(T/(2*pi)*sqrt(obj.mu))^(2/3);
            obj.h=sqrt(obj.mu*(1-obj.e^2)*obj.a);
        end
        function obj = initialVectorsFromOrbitalElements(obj)
            r=(obj.h^2)/(obj.mu*(1 +obj.e*cos(obj.theta_0)))
            obj.V_0 = [-obj.mu/obj.h*sin(obj.theta_0); obj.mu/obj.h*(obj.e+cos(obj.theta_0)) ; 0];
            obj.R_0 = [r.*cos(obj.theta_0); r.*sin(obj.theta_0) ; 0];
            Q_1 = [cos(obj.omega_0), sin(obj.omega_0),0
                    -sin(obj.omega_0),  cos(obj.omega_0), 0
                    0,0,1];
            Q_2 = [  1,0,0
                    0,cos(obj.i)     ,sin(obj.i)
                    0,-sin(obj.i)    ,cos(obj.i)];
            Q_3 = [cos(obj.Omega_0), sin(obj.Omega_0),0
                    -sin(obj.Omega_0),cos(obj.Omega_0),0
                    0,0,1];
            QxX = transpose(Q_1*Q_2*Q_3);
            obj.R_0 = QxX*obj.R_0;
            obj.V_0 = QxX*obj.V_0;
        end
        function obj = orbitaElementsFromVectors(obj,R_0,V_0)
            %METHOD1 Summary of this method goes here
            %   Detailed explanation goes here
            [r_0,v_0] = deal(norm(R_0),norm(V_0));
            vr_0 = dot(R_0,V_0)/r_0;
            H = cross(R_0,V_0);
            obj.h = norm(H);
            obj.i = acos(H(3)/obj.h);
            N = cross([0,0,1],H);
            n = norm(N);
            obj.Omega_0 = acos(N(1)/n);
            if obj.Omega_0<0
                obj.Omega_0 = 2*pi-obj.Omega_0;
            end
            E_0 = ((v_0^2-obj.mu/r_0)*R_0-r_0*vr_0*V_0)/obj.mu;
            obj.e = sqrt(1+obj.h^2/obj.mu^2*(v_0^2-2*obj.mu/r_0));
            obj.omega_0=acos(dot(N,E_0)/(n*obj.e));
            if obj.omega_0<0
                obj.omega_0 = 2*pi-obj.omega_0;
            end
            obj.theta_0=acos(dot(R_0,E_0)/(r_0*obj.e));
            if obj.theta_0<0
                obj.theta_0 = 2*pi-obj.theta_0;
            end
        end
        
        function obj = newVectorsFromOrbitalElements(obj)
            obj.a=obj.h^2/obj.mu *1/(1-obj.e^2);
            T=2*pi/sqrt(obj.mu)*obj.a^(3/2);
            n=2*pi/T;
            E_0 = 2*atan(sqrt((1-obj.e)/(1+obj.e))*tan(obj.theta_0/2));
            t_1=(E_0-obj.e*sin(E_0))/n;
            t_f=t_1+obj.dt;
            switch obj.method
                case 'f(t)'
                    
                    
                    obj.t(1,1,:)=t_1:t_f/obj.res:t_f;
                    n_p = obj.t/T;
                    t_n=(n_p-floor(n_p))*T;
                    M_n=n*t_n;
                    E_n = newtonMethodVec(obj.e,M_n,1.0e-8);
                    theta_n = 2*atan(sqrt((1+obj.e)/(1-obj.e))*tan(E_n/2));
                    r=(obj.h^2)/(obj.mu*(1 +obj.e*cos(theta_n)));
                    obj.V = [obj.mu/obj.h*sin(theta_n); obj.mu/obj.h*(obj.e+cos(theta_n)) ; zeros(size(obj.t))];

                    obj.R = [r.*cos(theta_n); r.*sin(theta_n) ; zeros(size(obj.t))];
                case 'Cowell'
                    options = odeset('reltol', 1.e-8, ...
                        'abstol', 1.e-8, ...
                        'initialstep', T/10000, ...
                        'events', @terminate);
                    if obj.drag == true
                        [ts,ys] = ode45(@(t,y)gravity(y,obj.mu,drag = obj.drag,C_d = 2.2,omega_e = obj.omega_earth,R_e = obj.R_e, A = pi/4, m = 100),linspace(t_1,t_f,obj.res),[obj.R_0;obj.V_0],options);
                    else
                        [ts,ys] = ode45(@(t,y)gravity(y,obj.mu,drag = obj.drag),linspace(t_1,t_f,obj.res),[obj.R_0;obj.V_0],options);
                    end
                    obj.t(1,1,:)=ts;
                    obj.R(:,1,:) = ys(:,1:3)';
                    obj.V(:,1,:) = ys(:,4:6)';
                    %...Extract the locally extreme altitudes:
                    altitude = sqrt(sum(ys(:,1:3).^2,2)) - obj.R_e; %Altitude at each time
                    [max_altitude,imax,min_altitude,imin] = extrema(altitude);
                    maxima = [ts(imax) max_altitude]; %Maximum altitudes and times
                    minima = [ts(imin) min_altitude]; %Minimum altitudes and times
                    apogee = sortrows(maxima,1); %Maxima sorted with time
                    perigee = sortrows(minima,1); %Minima sorted with time
                    figure(1)
                    apogee(1,2) = NaN;
                    days = 24*60*60;
                    %...Plot perigee and apogee history on the same figure:
                    plot(apogee(:,1)/days, apogee(:,2),'b','linewidth',2)
                    hold on
                    plot(perigee(:,1)/days, perigee(:,2),'r','linewidth',2)
                    grid on
                    grid minor
                    xlabel('Time (days)')
                    ylabel('Altitude (km)')
                    ylim([0 1000]);
                otherwise
                    print('Wrong orbit determination method')
            end
        end

        function obj = vectorToXandRevolvingCoord(obj)
            obj.Omega_dot = -(3/2*sqrt(obj.mu)*obj.J_2*obj.R_e^2/((1-obj.e^2)*obj.a^(7/2)))*cos(obj.i);
            obj.Omega = obj.Omega_0+obj.Omega_dot*(obj.t-obj.t(1));
            obj.omega_dot = -(3/2*sqrt(obj.mu)*obj.J_2*obj.R_e^2/((1-obj.e^2)*obj.a^(7/2)))*(5/2*sin(obj.i)^2-2);
            obj.omega = obj.omega_0+obj.omega_dot*(obj.t-obj.t(1));
            theta_e = obj.omega_earth * (obj.t-obj.t(1));
            Q_1 = [cos(obj.omega), sin(obj.omega),zeros(size(obj.omega))
                    -sin(obj.omega),cos(obj.omega), zeros(size(obj.omega))
                    zeros(size(obj.omega)) ,zeros(size(obj.omega)),ones(size(obj.omega))];
            Q_2 = [  1,0,0
                    0,cos(obj.i)     ,sin(obj.i)
                    0,-sin(obj.i)    ,cos(obj.i)];
            Q_3 = [cos(obj.Omega), sin(obj.Omega),zeros(size(obj.omega))
                    -sin(obj.Omega),cos(obj.Omega),zeros(size(obj.omega))
                    zeros(size(obj.omega)),zeros(size(obj.omega)),ones(size(obj.omega))];
            Q_d = [cos(theta_e), sin(theta_e),zeros(size(obj.omega))
                    -sin(theta_e),cos(theta_e),zeros(size(obj.omega))
                    zeros(size(obj.omega)),zeros(size(obj.omega)),ones(size(obj.omega))];
            QxX = pagetranspose(pagemtimes(pagemtimes(Q_1,Q_2),Q_3));
            obj.R_X = pagemtimes(QxX,obj.R);
            obj.V_X = pagemtimes(QxX,obj.V);
            obj.R_d = pagemtimes(Q_d,obj.R_X);
            obj.R_plot =squeeze(obj.R_d);
            obj.V_d = pagemtimes(Q_d,obj.V_X);
            obj.V_plot =squeeze(obj.V_d);
            
        end

        function obj = vectorToLongLat(obj)
            temp = mat2cell(obj.R_plot./vecnorm(obj.R_plot),[1,1,1]);
            [l,m,n] = temp{:};
            obj.delta = asin(n);
            obj.alpha = acos(l./cos(obj.delta));
            for iter = 1:length(obj.alpha)
                if m(iter) <0
                    obj.alpha(iter) = 2*pi-obj.alpha(iter);
                end
            end
            obj.alpha = obj.alpha*180/pi-180;
            obj.delta = obj.delta*180/pi;

        end
        function obj = divideAlpha(obj)
            tol = 100;
            breakPoints = [ 0 find(abs(diff(obj.alpha))>tol) length(obj.alpha)];
            obj.n_curves = length(breakPoints)-1;
            obj.RA = cell(length(obj.alpha)+1,1);
            obj.Dec = cell(length(obj.delta)+1,1);
            for iter = 1:length(breakPoints)-1
                obj.RA{iter} = obj.alpha(breakPoints(iter)+1:breakPoints(iter+1));
                obj.Dec{iter} = obj.delta(breakPoints(iter)+1:breakPoints(iter+1));
            end
        end
        function obj = orbitFromApoPeri(obj,r_a,r_p)
            obj.a = (r_a+r_p)/2;
            obj.e = (r_a-r_p)/(r_a+r_p);
            obj.h = sqrt(obj.mu*r_p*(1+obj.e));
        end
        function obj = plot3(obj)
            figure
            plot3(obj.R_plot(1,:),obj.R_plot(2,:),obj.R_plot(3,:));
        end
        function obj = plot(obj)
            figure
            load earth long lat;
            plot(long,lat,'.')
            hold on
            % shorter but slower : cellfun(@plot,orb12.RA,orb12.Dec)
            for iter = 1:obj.n_curves
                plot(obj.RA{iter},obj.Dec{iter});
            end
            plot(obj.alpha(1),obj.delta(1),'o','MarkerFaceColor','green');
            plot(obj.alpha(length(obj.alpha)),obj.delta(length(obj.delta)),'o','MarkerFaceColor','red');
            hold off
        end
        function obj = gibbs(obj)
            [r1,r2,r3] = deal(norm(obj.R1),norm(obj.R2),norm(obj.R3));
            C_12 = cross(obj.R1,obj.R2);
            C_23 = cross(obj.R2,obj.R3);
            C_31 = cress(obj.R3,obj.R1);
            N = r1*C_23 + r2*C_31 + r3*C_12;
            D = C_12+C_23+C_31;
            S = obj.R1*(r2-r3)+obj.R2*(r3-r1)+obj.R3*(r1-r2);
            n=norm(N);
            d=norm(D);
            V2 = sqrt(obj.mu/(n*d))*(cross(D,obj.R2)/r2+S);
            orbitaElementsFromVectors(obj,obj.R2,V2);
        end
    end
end

